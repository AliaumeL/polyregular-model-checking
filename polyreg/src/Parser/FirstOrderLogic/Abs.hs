-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language FirstOrderLogic.

module Parser.FirstOrderLogic.Abs where

import Prelude (Char, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Formula
    = FQuant Quantifier Formula
    | FIff Formula Formula
    | FImpl Formula Formula
    | FAnd Formula Formula
    | FOr Formula Formula
    | FNot Formula
    | FTrue
    | FFalse
    | FAtom Predicate
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Quantifier = QuantForall Ident Type | QuantExists Ident Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = TPos | TBool | TTag
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Predicate
    = BoolVar Ident
    | BinTest Ident TestOp Ident
    | BinLetEq Ident Char
    | BinTagEq Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TestOp = TLe | TLt | TGe | TGt | TEq | TNeq
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

