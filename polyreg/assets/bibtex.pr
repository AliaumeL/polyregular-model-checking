def getFirstWord (s : [Char]) : [Char] :=
    let mut seen_space : Bool := False in
    for (i, v : Char) in s do 
        if not seen_space and not (v =Char= ' ') then 
            yield v
        endif
        if v =Char= ' ' then 
            setTrue seen_space
        endif
    done

def getCurrentWord (s : [Char] with (i)) : [Char] :=
    let mut seen_space : Bool := False in
    for (j, v : Char) in s do 
       if j > i then 
           if v =Char= ' ' then 
               setTrue seen_space
           endif
           if not seen_space then 
              yield v 
           endif
       endif
     done 

def words (ss : [Char]) : [[Char]] :=
    yield getFirstWord(ss)
    for (i, vv : Char) in ss do 
        if vv =Char= ' ' then 
            yield getCurrentWord(ss with (i)) 
        endif 
     done

def getFirstAnd(words : [[Char]]) : [[Char]] :=
    let mut seen_and : Bool := False in
    for (i, w : [Char]) in words do 
        if w =[Char]= "and" then
            setTrue seen_and
        endif
        if not seen_and then 
            yield w
        endif
    done

def getCurrentAnd (words : [[Char]] with (i)) : [[Char]] :=
    let mut seen_and : Bool := False in
    for (j, w : [Char]) in words do 
        if j > i then 
            if w =[Char]= "and" then
                setTrue seen_and
            endif
            if not seen_and then 
                yield w
            endif
        endif
    done

def splitOnAnd(words : [[Char]]) : [[[Char]]] :=
    yield getFirstAnd(words)
    for (i, w : [Char]) in words do 
        if w =[Char]= "and" then
            yield getCurrentAnd(words with (i))
        endif
    done

def isSingleAuthor(author : [[Char]]) : Bool :=
    let mut one_name : Bool := False in
    for (i, name : [Char]) in author do
        if one_name then
            return False
        else
            setTrue one_name
        endif
    done
    return True

def getLastName(author : [[Char]]) : [Char] :=
    let mut last_name : Bool := False in 
    for (i, name : [Char]) in reversed(author) do
        if not last_name then
            return name
        endif
        setTrue last_name
    done

def getAllButFirstName(author : [[Char]]) : [[Char]] :=
    let mut first_name : Bool := False in 
    for (i, name : [Char]) in author do
        if not first_name then
            setTrue first_name
        else
            yield name
        endif
    done

def getAllButLastName(author : [[Char]]) : [[Char]] :=
    for (i, name : [Char]) in reversed(getAllButFirstName(reversed(author))) do
        yield name
    done

def remapAuthor(author : [[Char]]) : [[Char]] := 
    if isSingleAuthor(author) then
        return author
    else
        let last : [Char] := getLastName(author) in
        let allButLast : [[Char]] := getAllButLastName(author) in
        yield last
        yield ", "
        return allButLast
    endif


def intersperseAnd(ss : [[[Char]]]) : [[Char]] :=
    let mut started : Bool := False in
    for (i, author : [[Char]]) in ss do
        if started then
            yield " and "
        endif
        for (j, name : [Char]) in author do
            yield name
        done
        setTrue started
    done

def concat(ss : [[Char]]) : [Char] :=
    for (i, s : [Char]) in ss do
        yield s
    done

def mapRemapAuthor(authors : [[[Char]]]) : [[[Char]]] :=
    for (k, author : [[Char]])  in authors do
        yield remapAuthor(author)
    done

# This function maps 
# jack doe and jones 
# to 
# doe, jack and jones
# 
# etc.
def main (ss : [Char]) : [Char] :=
    let words : [[Char]] := words(ss) in
    let authors : [[[Char]]] := splitOnAnd(words) in
    return concat(intersperseAnd(mapRemapAuthor(authors)))
