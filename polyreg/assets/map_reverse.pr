def getFirstWord (s : [Char]) : [Char] :=
    let mut seen_space : Bool := False in
    for (i, v : Char) in s do 
        if not seen_space and not (v =Char= ' ') then 
            yield v
        endif
        if v =Char= ' ' then 
            setTrue seen_space
        endif
    done

def getCurrentWord (s : [Char] with (i)) : [Char] :=
    let mut seen_space : Bool := False in
    for (j, v : Char) in s do 
       if j > i then 
           if v =Char= ' ' then 
               setTrue seen_space
           endif
           if not seen_space then 
              yield v 
           endif
       endif
     done 

def words (ss : [Char]) : [[Char]] :=
    yield getFirstWord(ss)
    for (i, vv : Char) in ss do 
        if vv =Char= ' ' then 
            yield getCurrentWord(ss with (i)) 
        endif 
     done

def unwords(ss : [[Char]]) : [Char] :=
    let mut not_first : Bool := False in
    for (i, word : [Char]) in ss do 
        if not_first then 
            yield ' '
        endif
        for (j, v : Char) in word do 
            yield v
        done
        setTrue not_first
    done

def map_reverse (ss : [[Char]]) : [[Char]] :=
    for (i, s : [Char]) in ss do 
        yield reversed(s)
    done

def main ( w : [Char]) : [Char] := 
    return unwords(map_reverse(words(w)))
