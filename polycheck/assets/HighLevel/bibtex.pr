def getFirstWord (sa : [Char]) : [Char] :=
    let mut seen_space := False in
    for (i, v) in enumerate(sa) do 
        if not seen_space and not (v === ' ') then 
            yield v
        endif
        if v === ' ' then 
            seen_space := True
        endif
    done

def concatLists( l1 : [Char], l2 : [Char]) : [Char] :=
    for (i, v) in enumerate(l1) do 
        yield v
    done
    for (i, v) in enumerate(l2) do 
        yield v
    done



def getCurrentWord (sb : [Char] with (i)) : [Char] :=
    let mut seen_space := False in
    for (j, v) in enumerate(sb) do 
       if j > i then 
           if v =Char= ' ' then 
               seen_space := True
           endif
           if not seen_space then 
              yield v 
           endif
       endif
     done 

def words (ss : [Char]) : [[Char]] :=
    yield getFirstWord(ss)
    for (i, vv) in enumerate(ss) do 
        if vv =Char= ' ' then 
            yield getCurrentWord(ss with (i)) 
        endif 
     done

def getFirstAnd(wordsl : [[Char]]) : [[Char]] :=
    let mut seen_and := False in
    for (i, w) in enumerate(wordsl) do 
        if w =[Char]= "and" then
            seen_and := True
        endif
        if not seen_and then 
            yield w
        endif
    done

def getCurrentAnd (wordsc : [[Char]] with (i)) : [[Char]] :=
    let mut seen_and := False in
    for (j, w) in enumerate(wordsc) do 
        if j > i then 
            if w =[Char]= "and" then
                seen_and := True
            endif
            if not seen_and then 
                yield w
            endif
        endif
    done

def splitOnAnd(wordsd : [[Char]]) : [[[Char]]] :=
    yield getFirstAnd(wordsd)
    for (i, w) in enumerate(wordsd) do 
        if w =[Char]= "and" then
            yield getCurrentAnd(wordsd with (i))
        endif
    done

def isSingleAuthor(isSingleAuthorArg : [[Char]]) : Bool :=
    let mut one_name := False in
    for (i, name) in enumerate(isSingleAuthorArg) do
        if one_name then
            return False
        else
            one_name := True
        endif
    done
    return True

def getLastName(getLastNameArg : [[Char]]) : [Char] :=
    let mut last_name := False in 
    for (i, name) in reversed(enumerate(getLastNameArg)) do
        if not last_name then
            return name
        endif
        last_name := True
    done

def getAllButFirstName(getAllButFirstNameArg : [[Char]]) : [[Char]] :=
    let mut first_name := False in 
    for (i, name) in enumerate(getAllButFirstNameArg) do
        if not first_name then
            first_name := True
        else
            yield name
        endif
    done

def reverse(reverseArg : [Char]) : [Char] :=
    for (i, c) in reversed(enumerate(reverseArg)) do
        yield c
    done

def reverseLL(reverseArg : [[Char]]) : [[Char]] :=
    for (i, c) in reversed(enumerate(reverseArg)) do
        yield c
    done

def getAllButLastName(getAllButLastNameArg : [[Char]]) : [[Char]] :=
    for (i, name) in reversed(enumerate(getAllButFirstName(reverseLL(getAllButLastNameArg)))) do
        yield name
    done

def addComma(author : [Char]) : [Char] :=
    for (i, c) in enumerate(author) do
        yield c
    done
    yield ','


def remapAuthor(remapAuthorArg : [[Char]]) : [[Char]] := 
    if isSingleAuthor(remapAuthorArg) then
        return remapAuthorArg
    else
        let last := getLastName(remapAuthorArg) in
        let allButLast := getAllButLastName(remapAuthorArg) in
        yield concatLists(last, ",")
        return allButLast
    endif


def intersperseAnd(sss : [[[Char]]]) : [[Char]] :=
    let mut started := False in
    for (i, intersperseAndIter) in enumerate(sss) do
        if started then
            yield "and"
        endif
        for (j, name) in enumerate(intersperseAndIter) do
            yield name
        done
        started := True
    done

def concat(ss : [[Char]]) : [Char] :=
    let mut started := False in
    for (i, s) in enumerate(ss) do
        if started then
            yield ' '
        endif
        started := True
        for (j, c) in enumerate(s) do
            yield c
        done
    done

def mapRemapAuthor(mapRemapAuthorArg : [[[Char]]]) : [[[Char]]] :=
    for (k, mapRemapAuthorIter) in enumerate(mapRemapAuthorArg) do
        yield remapAuthor(mapRemapAuthorIter)
    done

# This function maps 
# jack doe and jones 
# to 
# doe, jack and jones
# 
# etc.
def main (ssmain : [Char]) : [Char] :=
    let words := words(ssmain) in
    let authors := splitOnAnd(words) in
    let mapRemapAuthorV  := mapRemapAuthor(authors) in
    let intersperseAnd  := intersperseAnd(mapRemapAuthorV) in
    let concat := concat(intersperseAnd) in
    return concat
