-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language HighLevelForProgram.

module Parser.HighLevelForProgram.Abs where

import Prelude (Char, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = ProgramC [Func]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Func = FuncC Ident [ArgD] Type [Stmt]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt
    = SFor Ident Ident Expr [Stmt]
    | SRFor Ident Ident Expr [Stmt]
    | SIf Expr [Stmt]
    | SIfE Expr [Stmt] [Stmt]
    | SYield Expr
    | SReturn Expr
    | SLetIn Ident Expr [Stmt]
    | SLetBIn Ident [Stmt]
    | SLetSetTrue Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = VEChar Char
    | VEString String
    | VEListConstr [Expr]
    | VEGen [Stmt]
    | VEVal Ident
    | VEFunc Ident [VEArg]
    | BETrue
    | BEFalse
    | BENot Expr
    | BEBinOp Expr BinOp Expr
    | BEAnd Expr Expr
    | BEOr Expr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = TChar | TList Type | TBool
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VEArg = VEArgSole Expr | VEArgWithPoses Expr [Ident]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ArgD = ArgDSole Ident Type | ArgDWithPoses Ident Type [Ident]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BinOp
    = BinOpEq
    | BinOpNeq
    | BinOpLeq
    | BinOpLt
    | BinOpGeq
    | BinOpGt
    | BinOpVEqT Type
    | BinOpVEq
    | BinOpVNe
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

