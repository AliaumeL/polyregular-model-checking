-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Parser.FirstOrderLogic.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Parser.FirstOrderLogic.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Parser.FirstOrderLogic.Abs.Ident -> Result
transIdent x = case x of
  Parser.FirstOrderLogic.Abs.Ident string -> failure x

transFormula :: Parser.FirstOrderLogic.Abs.Formula -> Result
transFormula x = case x of
  Parser.FirstOrderLogic.Abs.FQuant quantifier formula -> failure x
  Parser.FirstOrderLogic.Abs.FIff formula1 formula2 -> failure x
  Parser.FirstOrderLogic.Abs.FImpl formula1 formula2 -> failure x
  Parser.FirstOrderLogic.Abs.FAnd formula1 formula2 -> failure x
  Parser.FirstOrderLogic.Abs.FOr formula1 formula2 -> failure x
  Parser.FirstOrderLogic.Abs.FNot formula -> failure x
  Parser.FirstOrderLogic.Abs.FTrue -> failure x
  Parser.FirstOrderLogic.Abs.FFalse -> failure x
  Parser.FirstOrderLogic.Abs.FAtom predicate -> failure x

transQuantifier :: Parser.FirstOrderLogic.Abs.Quantifier -> Result
transQuantifier x = case x of
  Parser.FirstOrderLogic.Abs.QuantForall ident type_ -> failure x
  Parser.FirstOrderLogic.Abs.QuantExists ident type_ -> failure x

transType :: Parser.FirstOrderLogic.Abs.Type -> Result
transType x = case x of
  Parser.FirstOrderLogic.Abs.TPos -> failure x
  Parser.FirstOrderLogic.Abs.TBool -> failure x
  Parser.FirstOrderLogic.Abs.TTag -> failure x

transPredicate :: Parser.FirstOrderLogic.Abs.Predicate -> Result
transPredicate x = case x of
  Parser.FirstOrderLogic.Abs.BoolVar ident -> failure x
  Parser.FirstOrderLogic.Abs.BinTest ident1 testop ident2 -> failure x
  Parser.FirstOrderLogic.Abs.BinLetEq ident char -> failure x
  Parser.FirstOrderLogic.Abs.BinTagEq ident string -> failure x

transTestOp :: Parser.FirstOrderLogic.Abs.TestOp -> Result
transTestOp x = case x of
  Parser.FirstOrderLogic.Abs.TLe -> failure x
  Parser.FirstOrderLogic.Abs.TLt -> failure x
  Parser.FirstOrderLogic.Abs.TGe -> failure x
  Parser.FirstOrderLogic.Abs.TGt -> failure x
  Parser.FirstOrderLogic.Abs.TEq -> failure x
  Parser.FirstOrderLogic.Abs.TNeq -> failure x
