-- Translate to haskell with `bnfc --haskell -d -p Parser SimpleForProgram.cf`
-- Remember to remove the Test.hs file, which breaks the build

comment "#" ;

separator nonempty Stmt "" ;
separator nonempty IdentHash "," ;

Program . Program ::= VarStmt ; 

VarStmt . VarStmt ::= "let" [IdentHash] ":=" "false" "in" [Stmt] ;
NoVarStmt . VarStmt ::= [Stmt] ;

FInput . FORInput ::= "input" ; 
FRevInput . FORInput ::= "reversed" "(" "input" ")" ;

SFor. Stmt ::= "for" IdentHash "in" FORInput "do" VarStmt "done" ;
SSetTrue. Stmt ::= IdentHash ":=" "true" ;
SIfElse. Stmt ::= "if" BExpr "then" [Stmt] "else" [Stmt] "endif" ;
SIf. Stmt ::= "if" BExpr "then" [Stmt] "endif" ;
SPrintChar . Stmt ::= "print" Char ; 
SPrintLabel . Stmt ::= "print" IdentHash ;
SSkip . Stmt ::= "skip" ; 

BTrue . BExpr2 ::= "true" ;
BFalse . BExpr2 ::= "false" ; 
BVar . BExpr2 ::= IdentHash ; 
BNot . BExpr2 ::= "not" BExpr2 ; 
BTest . BExpr2 ::= IdentHash BTest IdentHash ;
BLabelAt . BExpr2 ::= "label" "(" IdentHash ")" "==" Char ;
BAnd . BExpr1 ::= BExpr2 "and" BExpr1 ; 
BOr .  BExpr ::= BExpr1 "or" BExpr ;
coercions BExpr 2 ;

TLe . BTest ::= "<=" ; 
TLt . BTest ::= "<" ; 
TGe . BTest ::= ">=" ; 
TGt . BTest ::= ">" ; 
TEq . BTest ::= "==" ; 
TNeq . BTest ::= "!=" ;

token IdentHash letter (letter | digit | '_' | '\'' | '#')* 
